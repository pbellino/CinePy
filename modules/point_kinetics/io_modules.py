#!/usr/bin/env python3

import numpy as np
import os


def _lee_dt_encabezado(encabezado, _tipo_datos):
    """
    Función para leer el intervalo temporal del encabezado

    TODO
    """
    if _tipo_datos == 'AI':
        _frecuencia = np.double(encabezado[14].split()[-1])
        filtrada = encabezado[11].split()[-1].decode("utf-8")
        if filtrada == 'Si':
            _num_col = 3
        elif filtrada == 'No':
            _num_col = 2
        else:
            print('No se puede determinar si la señal analógica fue filtrada.')
            print('Se sale')
            quit()
    elif _tipo_datos == 'CT':
        _frecuencia = np.double(encabezado[6].split()[-1])
        _num_col = 2
    dt = 1.0 / _frecuencia
    return dt, _num_col


def lee_reactimetro(nombre):
    """
    Read data file generated by Multi-Reactimeter

    TODO
    """

    # Se fija el tipo de señal que se quiere leer (AI o CT)
    if 'AI' in os.path.split(nombre)[1]:
        _tipo_datos = 'AI'
        _lineas_encabezado = 20
    elif 'CT' in os.path.split(nombre)[1]:
        _tipo_datos = 'CT'
        _lineas_encabezado = 14
    else:
        print('No es posible determinar el tipo de archivo. No es AI ni CT.')
        print('Se sale')
        quit()

    # Se lee el archivo
    with open(nombre, 'rb') as f:
        # Lectura del encabezado
        encabezado = []
        for _ in range(_lineas_encabezado):
            encabezado.append(f.readline().rstrip())
        # Obtención del dt
        dt, _num_col = _lee_dt_encabezado(encabezado, _tipo_datos)
        # Definición del tipo de dato que se leerá
        if _num_col == 3:
            df = np.dtype([('>f8', '>f8', '>f8')])
        elif _num_col == 2:
            df = np.dtype([('>f8', '>f8')])
        # Lectura de datos
        _data = np.fromfile(f, dtype=df)

    # Ordena por columnas
    _num_datos = int(_data.size / _num_col)
    _data = _data.reshape(_num_datos, _num_col).astype(np.float)
    # Separa los datos
    n = _data[:, 0]
    rho = _data[:, 1]
    if _num_col == 2:
        sdn = None
    if _num_col == 3:
        sdn = _data[:, 2]
    # Vector temporal
    t = np.linspace(0, dt*(n.size-1), num=n.size)
    return n, rho, t, sdn, dt, encabezado


if __name__ == '__main__':
    pass
